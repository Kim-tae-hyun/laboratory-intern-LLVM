#include "llvm/Pass.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/IRBuilder.h"
#include "llvm/IR/Module.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/IR/Type.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/ADT/StringExtras.h"



using namespace llvm;

namespace {
struct standard : public ModulePass {
  static char ID;
  standard() : ModulePass(ID) {}

//	virtual bool doInitialization(Module &M) {

//}
virtual bool doInitialization(Module &M) {

	return false;
	}

  bool runOnModule(Module &M) override {
	Mod = &M;
	

	errs().changeColor(raw_ostream::RED);
	errs() << "Module::iterator" << " ...\n";
	errs().resetColor();
	//Type::subtype_iterator Tit;
	

	//GlobalVariable* str =M.getNamedGlobal(".str");
	//errs() << "GlobalVariable* str adress : " << str << "\n";
	//errs() << "GlobalVariable* str Instruction : " << *str << "\n";
	
	
	
	GlobalValue* number =M.getNamedGlobal("number");
	//GlobalValue* atm = M.getNamedValue("number");
	//errs() << atm << "\n";
	//GlobalAlias* num =M.getNamedAlias("number");
	errs() << number->getType() << "\n";
	//Value v = new Value(number->getType(),null);
	
	//errs() << (Mod->getContext())->dump() << "\n";
	//errs() << "GlobalAlias* " << num->getName() << "\n"; 
	errs() << "GlobalVariable* number adress : " << number << "\n";
	errs() << "GlobalVariable* number Instruction : " << *number << "\n";


	for(Module::global_iterator gs = M.global_begin(), ge = M.global_end(); gs != ge; ++gs){
	//errs() << gs->getType()->getAddressSpace()<<"\n";
	//errs() << *gs <<"\n";
		gs->dump();
		//if(!gs->isConstant()){
		//gs->dump();
		for(unsigned int i=0; i<gs->getNumOperands(); i++)
				{
				 errs()<<" | "<<gs->getOperand(i)->getName();
				}	
				errs()<<"\n";	
		//errs() << gs->getOperand(0)<<"\n";		
	//}

	}

	
	
//	FunctionType *function= get;
	//M.getOrInsertGlobal("str",2);
	
	
	for(Module::iterator F = M.begin(); F !=M.end(); ++F){

		errs().changeColor(raw_ostream::GREEN);
		errs() << "Function::iterator " << F->getName()<<" ...\n";
		errs().resetColor();

		

		for(Function::iterator BB = F->begin(), EE = F->end(); BB !=EE; ++BB) {
		
		errs().changeColor(raw_ostream::YELLOW);
		errs() << "BasicBlock::iterator" << " ...\n";
		errs().resetColor();
		
		  for (BasicBlock::iterator I = BB->begin(), E = BB->end(); I != E; ++I) {
			
			errs().changeColor(raw_ostream::BLUE);
			I->dump();
			errs().resetColor();
			if(isa<LoadInst>(I) || isa<StoreInst>(I))
				{
				errs()<<I->getOpcodeName();
				for(unsigned int i=0; i<I->getNumOperands(); i++)
				{
				 errs()<<" | "<<I->getOperand(i);
				}	
				errs()<<"\n";		
				/*errs()<<"BasicBlock::iterator "<<I->getOpcodeName()<<" | "<<I->getOperand(1)->getName()<<" : "<<I->getOperand(0)<<" | "<<I->getOperand(1)<<"\n";*/
			}
			
		}
		}	
	}
    return false;
  }

  private:
	  Module *Mod;
	  Constant *PrintFunc;
	 
}; // end of struct Hello
}  // end of anonymous namespace

char standard::ID = 0;
static RegisterPass<standard> X("standard", "standard Pass",
                             false /* Only looks at CFG */,
                             false /* Analysis Pass */);
